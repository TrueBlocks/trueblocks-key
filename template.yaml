AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template with a simple API definition

Parameters:
  RDSMasterUserName:
    Type: String
    Default: tbqnadmin
  RDSDBName:
    Type: String
    Default: tbqnindex
  UsersQnTableName:
    Type: String
    Default: trueblocks-qn-users-qn
  AppearancesQueueBatchSize:
    Type: Number
    Default: "10"
  QnApiStageName:
    Type: String
    Default: prod
  QnBetaTestApiKeyName:
    Type: String
    Default: qn-beta-test

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    Architectures: ["x86_64"]
    Timeout: 30
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"

Resources:
  ###
  # Databases
  ###

  ## SQL Appearances Database
  IndexDatabase:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSecurityGroup
      - RDSSubnetGroup
    Properties:
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: indexdatabase
      Engine: postgres
      AllocatedStorage: "20"
      DBName: !Ref RDSDBName
      MasterUsername: !Ref RDSMasterUserName
      ManageMasterUserPassword: true
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  ### DynamoDB QN users
  UsersQn:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: QuicknodeId
        Type: String
      TableName: !Ref UsersQnTableName

  ###
  # Appearances Queue
  ###

  AppearancesQueueConsume:
    Type: AWS::Serverless::Function
    DependsOn:
      - IndexDatabase
      - AppearancesQueue
    Properties:
      MemorySize: 512
      Runtime: go1.x
      Handler: consume
      CodeUri: queue/consume/lambda
      Events:
        Ingest:
          Type: SQS
          Properties:
            Queue: !GetAtt AppearancesQueue.Arn
            BatchSize: !Ref AppearancesQueueBatchSize
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Environment:
        Variables:
          QNEXT_SQS_BATCHSIZE: !Ref AppearancesQueueBatchSize
          QNEXT_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          QNEXT_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          QNEXT_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          QNEXT_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          QNEXT_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  AppearancesQueue:
    Type: AWS::SQS::Queue

  ###
  # API
  ###

  QnApi:
    Type: AWS::Serverless::Api
    DependsOn:
      - QnAuthorizer
    Properties:
      StageName: !Ref QnApiStageName
      ApiKeySourceType: AUTHORIZER
      Models:
        RpcRequest:
          type: object
          required:
            - method
            - params
          Properties:
            jsonrpc:
              type: string
            id:
              type: number
            method:
              type: string
            params:
              type: array
              items:
                address:
                  type: string
                  required: true
                page:
                  type: number
                perPage:
                  type: number
      Auth:
        # Authorizer
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            # This setup uses default auth caching of 300 sec = 5 h
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt QnAuthorizer.Arn
            Identity:
              Headers:
                - Authorization
                - x-quicknode-id

  # ### QN Authorizer
  QnAuthorizer:
    Type: AWS::Serverless::Function
    DependsOn:
      - ProvisionQnSecret
    Properties:
      MemorySize: 512
      Runtime: go1.x
      Handler: authorizer
      CodeUri: quicknode/authorizer/lambda
      Environment:
        Variables:
          QNEXT_QNPROVISION_AWSSECRET: !Ref ProvisionQnSecret
          QNEXT_QNPROVISION_TABLENAME: !Ref UsersQnTableName
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - AmazonDynamoDBReadOnlyAccess
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !Ref ProvisionQnSecret

  # ### QN healthcheck

  ApiHealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 512
      Runtime: go1.x
      Handler: healthcheck
      CodeUri: quicknode/healthcheck/lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            # Make sure this endpoint does not require auth
            Auth:
              # ApiKeyRequired: false
              Authorizer: NONE
            Path: /healthcheck
            Method: get
            RestApiId:
              Ref: QnApi
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Environment:
        Variables:
          QNEXT_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          QNEXT_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          QNEXT_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          QNEXT_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          QNEXT_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  # ### QN Provision
  ProvisionQnSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: QN Provision username and password
      SecretString: '{"username":"Placeholder","password":"placeholder"}'

  ApiProvisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Runtime: go1.x
      Handler: provision
      CodeUri: quicknode/provision/lambda
      Events:
        Provision:
          Type: Api
          Properties:
            Path: /provision
            Method: post
            RestApiId:
              Ref: QnApi
            Auth:
              # We cannot authorize against account here
              Authorizer: NONE
        Update:
          Type: Api
          Properties:
            Path: /update
            Method: put
            RestApiId:
              Ref: QnApi
        Deactivate:
          Type: Api
          Properties:
            Path: /deactivate_endpoint
            Method: delete
            RestApiId:
              Ref: QnApi
        Deprovision:
          Type: Api
          Properties:
            Path: /deprovision
            Method: delete
            RestApiId:
              Ref: QnApi
      Environment:
        Variables:
          QNEXT_QNPROVISION_AWSSECRET: !Ref ProvisionQnSecret
          QNEXT_QNPROVISION_TABLENAME: !Ref UsersQnTableName
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - AmazonDynamoDBFullAccess
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !Ref ProvisionQnSecret
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - apigateway:GET
              Resource: "*"

  # ### RPC route
  RpcFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      Runtime: go1.x
      Handler: query
      CodeUri: query/lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /rpc
            Method: post
            RequestModel:
              Model: RpcRequest
              Required: true
              ValidateBody: true
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: QnApi
      Environment:
        Variables:
          QNEXT_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          QNEXT_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          QNEXT_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          QNEXT_DATABASE_DEFAULT_PASSWORD:
          QNEXT_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          QNEXT_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  ###
  # Plans
  ###

  ### QN plans

  UsagePlanQnBetaTest:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - QnApi
    Properties:
      ApiStages:
        - ApiId: !Ref QnApi
          Stage: !Ref QnApiStageName
      Description: Test plan for QN beta testing
      Quota:
        Limit: 500
        Period: MONTH
      Throttle:
            BurstLimit: 100
            RateLimit: 10
      UsagePlanName: qn-beta-test
  ApiKeyQnBetaTest:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - UsagePlanQnBetaTest
    Properties:
      # Note: due to SAM limitations, name of the plan HAS to be the same
      # as plan slug defined in QN
      Name: !Ref QnBetaTestApiKeyName
      Enabled: true
  LinkUsagePlanApiKeyQnBetaTest:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKeyQnBetaTest
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanQnBetaTest

  ###
  # S3 object storage
  ###

  # Not used:
  # IndexBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: trueblocks-qn-index

  ###
  # Network
  ###

  # create VPC
  RDSVPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: 172.32.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

  # create subnets
  privateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.0.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]

  privateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.16.0/20
      AvailabilityZone: !Select [ 1, !GetAZs ]

  privateLambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.32.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]

  privateLambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.48.0/20
      AvailabilityZone: !Select [ 1, !GetAZs ]

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "description"
      SubnetIds:
        - !Ref privateDBSubnet1
        - !Ref privateDBSubnet2

  # Security groups
  # https://repost.aws/knowledge-center/connect-lambda-to-an-rds-instance

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - LambdaSecurityGroup
    Properties:
      GroupDescription: Allow Postgres access from lambda subnets
      VpcId: !Ref RDSVPC
      # Make sure the database is only accessible from the stack, database port only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId : !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - RDSVPC
    Properties:
      GroupDescription: Security group for Lambda ENIs
      VpcId: !Ref RDSVPC
      # Allow Lambda <-> Secrets Manager:
      SecurityGroupIngress:
        - IpProtocol: -1
          ToPort: 65535
          FromPort: 0
          CidrIp: !GetAtt privateLambdaSubnet1.CidrBlock
        - IpProtocol: -1
          ToPort: 65535
          FromPort: 0
          CidrIp: !GetAtt privateLambdaSubnet2.CidrBlock


  ### VPC Endpoints
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - LambdaSecurityGroup
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      PrivateDnsEnabled: true
      VpcId: !Ref RDSVPC
      SubnetIds:
        - !Ref privateLambdaSubnet1
        - !Ref privateLambdaSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
