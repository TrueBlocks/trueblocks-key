AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template with a simple API definition

Parameters:
  RDSMasterUserName:
    Type: String
    Default: admin
  RDSDBName:
    Type: String
    Default: index
  AppearancesQueueBatchSize:
    Type: Number
    Default: "10"

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    MemorySize: 1024
    Architectures: ["x86_64"]
    Timeout: 30

Resources:
  ###
  # Database
  ###

  # Database master user password. Note: we want it to be managed by RDS service
  RDSMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'RDS instance secret'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${!Ref RDSMasterUserName}"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  # Database
  IndexDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: indexdatabase
      Engine: postgres
      DBName: !Ref RDSDBName
      MasterUsername: !Ref RDSMasterUserName
      # https://github.com/aws-samples/aws-secrets-manager-secure-database-credentials/blob/main/secretsmanager_IaC.yml
      # MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSInstanceRotationSecret, ':SecretString:password}}' ]]
      # TODO: Does this rotate the secret?
      ManageMasterUserPassword: true
      MasterUserSecret:
        SecretArn: !Ref RDSMasterSecret
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup

  ###
  # Appearances Queue
  ###

  AppearancesQueueConsume:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: go1.x
      Handler: consume
      CodeUri: queue/consume/lambda
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AppearancesQueue.Arn
            BatchSize: !Ref AppearancesQueueBatchSize
      Environment:
        Variables:
          QNEXT_SQS_BATCHSIZE: !Ref AppearancesQueueBatchSize
          QNEXT_DATABASE_HOST: !GetAtt IndexDatabase.Endpoint.Address
          QNEXT_DATABASEPORT: !GetAtt IndexDatabase.Endpoint.Port
          QNEXT_DATABASE_USER: !Ref RDSMasterUserName
          QNEXT_DATABASE_AWSSECRET: !Ref RDSMasterSecret
          QNEXT_DATABASE_DATABASE: !Ref RDSDBName
  AppearancesQueue:
    Type: AWS::SQS::Queue

  ###
  # API
  ###

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  # Route: /index
  ApiFunction:
    Type: AWS::Serverless::Function
    DependsOn: "MountTarget1"
    Properties:
      Runtime: go1.x
      Handler: query
      CodeUri: query/lambda
      Layers:
        # move to Globals to enable for all functions
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /index
            Method: get
            RequestParameters:
              - method.request.querystring.address:
                  Required: true
                  Caching: false
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: ApiGatewayApi
      Environment:
        Variables:
          QNEXT_DATABASE_HOST: !GetAtt IndexDatabase.Endpoint.Address
          QNEXT_DATABASEPORT: !GetAtt IndexDatabase.Endpoint.Port
          QNEXT_DATABASE_USER: !Ref RDSMasterUserName
          QNEXT_DATABASE_AWSSECRET: !Ref RDSMasterSecret
          QNEXT_DATABASE_DATABASE: !Ref RDSDBName
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Policies:
      # TODO: do we need RDS access via VPC policy?
      # Unused:
      #   - S3ReadPolicy:
      #       BucketName: !Ref IndexBucket
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref MasterUserSecret

  ###
  # S3 object storage
  ###

  # Not used:
  IndexBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: trueblocks-qn-index

  ###
  # Network
  ###

  # create VPC
  RDSVPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: 172.32.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

  # create subnets
  privateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.0.0/20

  privateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.16.0/20

  privateLambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.32.0/20

  privateLambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.48.0/20

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "description"
      SubnetIds:
        - !Ref privateDBSubnet1
        - !Ref privateDBSubnet2

  # Security groups
  # https://repost.aws/knowledge-center/connect-lambda-to-an-rds-instance

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres access from lambda subnets
      VpcId: !Ref RDSVPC
      # Make sure the database is only accessible from the stack, database port only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId : !Ref LambdaSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda ENIs
      VpcId: !Ref RDSVPC
      # Allow lambdas to connect to the database
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: -1
          ToPort: 5432
          DestinationSecurityGroupId: !Ref RDSSecurityGroup
