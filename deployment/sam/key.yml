AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template with a simple API definition

Parameters:
  RDSMasterUserName:
    Type: String
    Default: key_admin
  RDSDBName:
    Type: String
    Default: key_index
  UsersQnTableName:
    Type: String
    Default: key-prod-users-qn
  AppearancesQueueBatchSize:
    Type: Number
    Default: 400
  AppearancesQueueConsumeMaxConcurrency:
    Type: Number
    Default: 30
  QnApiStageName:
    Type: String
    Default: prod
  QnStandardPlanSlug:
    Type: String
    Default: qn-standard

Conditions:
  IsLocal: !Equals [123456789012, !Ref AWS::AccountId]

# Global values that are applied to all applicable resources in this template
Globals:
  Function:
    Architectures: ["arm64"] # ["x86_64"]
    Runtime: provided.al2023
    Handler: bootstrap
    Timeout: 30
    Layers:
      - !If [IsLocal, "arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension-Arm64:12", !Ref AWS::NoValue]
      # - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38"

Outputs:
  AppearancesQueueIngestUserAccessKey:
    Description: Access key to ingest new queue items
    Value: !Ref AppearancesQueueIngestUserKey
  AppearancesQueueIngestUserSecretKey:
    Description: Secret key to ingest new queue items
    Value: !GetAtt AppearancesQueueIngestUserKey.SecretAccessKey

Resources:
  ###
  # Databases
  ###

  ## SQL Appearances Database
  IndexDatabase:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSImportFromS3Role
      - RDSSecurityGroup
      - RDSSubnetGroup
    Properties:
      # Setting BackupRetentionPeriod to 0 DISABLES BACKUPS
      BackupRetentionPeriod: 4
      # Turn off only when uploading datasets:
      AutoMinorVersionUpgrade: true
      DBInstanceIdentifier: !Sub ${AWS::StackName}-index
      DBInstanceClass: db.t4g.xlarge # db.t4g.medium # db.t3.micro
      DBParameterGroupName: !Ref IndexDatabaseParameterGroup
      Engine: postgres
      AllocatedStorage: "1500"
      StorageType: "gp3"
      DBName: !Ref RDSDBName
      MasterUsername: !Ref RDSMasterUserName
      ManageMasterUserPassword: true
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MonitoringInterval: 10
      MonitoringRoleArn: !GetAtt IndexDatabaseEnhancedMonitoringRole.Arn
      AssociatedRoles:
      - FeatureName: s3Import
        RoleArn: !GetAtt RDSImportFromS3Role.Arn

  IndexDatabaseParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Index database parameters
      Family: postgres15
      # Modifying these causes database to go DOWN:
      Parameters:
        work_mem: 16384 # 16 MB
        # Below settings are useful when uploading large dataset
        # maintenance_work_mem: 'GREATEST({DBInstanceClassMemory/63963136*1024},65536)'
        # maintenance_work_mem: 3145728 # 3 GB in kB
        # autovacuum: false
        # min_wal_size: 10240 # MB = 10 GB
        # max_wal_size: 30720 # MB = 30 GB
        # checkpoint_timeout: 3600 # in sec = 1 h
        # synchronous_commit: 'off'
        # wal_buffers: -1


  # Index database enhanced monitoring role
  IndexDatabaseEnhancedMonitoringRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'monitoring.rds.amazonaws.com'
          Action: 'sts:AssumeRole'

  # Database alarms
  RDSLowStorageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RDS Low Storage Alarm
      AlarmDescription: This alarm is triggered when RDS storage is lower than or equal to 10GB
      AlarmActions:
        - !Ref AlarmNotification
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Statistic: Average
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Sub ${AWS::StackName}-index
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 21474836480 # bytes = 20 GB
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: missing

  RDSLowMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RDS Low Memory Alarm
      AlarmDescription: This alarm is triggered when RDS memory is lower than or equal to 1GB
      AlarmActions:
        - !Ref AlarmNotification
      MetricName: FreeableMemory
      Namespace: AWS/RDS
      Statistic: Average
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Sub ${AWS::StackName}-index
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1073741824 # bytes = 20 GB
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: missing

  RDSHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RDS High CPU Alarm
      AlarmDescription: This alarm is triggered when RDS CPU usage is greater than or equal to 70%
      AlarmActions:
        - !Ref AlarmNotification
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Sub ${AWS::StackName}-index
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 70 # %
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: missing

  # Allow importing db from S3
  RDSImportFromS3Role:
    Type: AWS::IAM::Role
    DependsOn:
      - DevOpsDbUploadBucket
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: rds.amazonaws.com
      Policies:
        - PolicyName: rdsImportFromS3
          PolicyDocument:
            Version: '2012-10-17' # Policy Document
            Statement:
              - Sid: s3import
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DevOpsDbUploadBucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DevOpsDbUploadBucket
                      - '/*'

  ### DynamoDB QN users
  UsersQn:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: QuicknodeId
        Type: String
      TableName: !Sub ${AWS::StackName}-${UsersQnTableName}

  ###
  # Appearances Queue
  ###

  AppearancesQueue:
    Type: AWS::SQS::Queue

  AppearancesQueueConsume:
    Type: AWS::Serverless::Function
    DependsOn:
      - IndexDatabase
      - AppearancesQueue
    Metadata:
      BuildMethod: go1.x
    Properties:
      MemorySize: 128
      CodeUri: ../../queue/consume/lambda
      ReservedConcurrentExecutions: !Ref AppearancesQueueConsumeMaxConcurrency
      Events:
        Ingest:
          Type: SQS
          Properties:
            Queue: !GetAtt AppearancesQueue.Arn
            BatchSize: !Ref AppearancesQueueBatchSize
            MaximumBatchingWindowInSeconds: 1 # remove if BatchSize <= 10
            ScalingConfig:
              MaximumConcurrency: !Ref AppearancesQueueConsumeMaxConcurrency
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Environment:
        Variables:
          KY_SQS_BATCHSIZE: !Ref AppearancesQueueBatchSize
          KY_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          KY_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          KY_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          KY_DATABASE_DEFAULT_PASSWORD: "" # Used only in integration tests
          KY_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          KY_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  # User used to ingest queue items programmatically

  AppearancesQueueIngestUser:
    Type: AWS::IAM::User
    Properties:
      UserName: appearances-queue-ingester
      Policies:
        - PolicyName: appearances-queue-ingest-policy
          PolicyDocument:
            Version: '2012-10-17' # Policy Document
            Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
              Resource: !GetAtt AppearancesQueue.Arn

  # User's keys (secret key can be fetched using !GetAtt SecretAccessKey)

  AppearancesQueueIngestUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref AppearancesQueueIngestUser

  # Queue Alarms

  AppearancesQueueStuckMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Appearances Queue Message Stuck
      AlarmDescription: Alarms if the SQS Queue has messages in it for too long
      AlarmActions:
        - !Ref AlarmNotification
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AppearancesQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 3600 # 1 hour
      Statistic: Maximum
      Threshold: 14400 # 4 hours
      TreatMissingData: notBreaching
      Unit: Seconds

  AppearancesQueueNoMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Appearances Queue No Messages
      AlarmDescription: Alarms if the SQS Queue is not receiving new messages
      AlarmActions:
        - !Ref AlarmNotification
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AppearancesQueue.QueueName
      EvaluationPeriods: 1
      MetricName: NumberOfMessagesSent
      Namespace: AWS/SQS
      Period: 43200 # 12 hour
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Unit: Count

  ###
  # Alarm notifications
  ###

  AlarmNotification:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: "email"
          Endpoint: "dawid@quickblocks.io"

  ###
  # API
  ###

  QnApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref QnApi
          - access-logs

  QnApi:
    Type: AWS::Serverless::Api
    DependsOn:
      - QnAuthorizer
    Properties:
      StageName: !Ref QnApiStageName
      ApiKeySourceType: AUTHORIZER
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
      AccessLogSetting:
        DestinationArn: !GetAtt QnApiLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      Models:
        RpcRequest:
          type: object
          required:
            - method
            - params
          Properties:
            jsonrpc:
              type: string
            id:
              type: number
            method:
              type: string
            params:
              type: array
              items:
                address:
                  type: string
                  required: true
                page:
                  type: number
                perPage:
                  type: number
      Auth:
        # Authorizer
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            # This setup uses default auth caching of 300 sec = 5 h
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt QnAuthorizer.Arn
            Identity:
              Headers:
                - x-quicknode-id
                - x-instance-id
                - x-qn-chain
                - x-qn-network

  # CloudWatch logging policies

  # Specifies the IAM role that API Gateway uses to write API logs to Amazon CloudWatch Logs
  QnApiLoggingRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt QnApiCloudWatchRole.Arn

  # IAM Role with 'AmazonAPIGatewayPushToCloudWatchLogs' managed policy
  QnApiCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  # For QuickNode, we need to override the default MISSING_AUTHENTICATION_TOKEN
  # status code. QN expects it to be 401, not 403
  QnGatewayResponseMissingAuthToken:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      RestApiId: !Ref QnApi
      StatusCode: "401"

  # ### QN Authorizer
  QnAuthorizer:
    Type: AWS::Serverless::Function
    DependsOn:
      - QnProvisionSecret
    Metadata:
      BuildMethod: go1.x
    Properties:
      MemorySize: 128
      CodeUri: ../../quicknode/authorizer/lambda
      Environment:
        Variables:
          KY_QNPROVISION_AWSSECRET: !Ref QnProvisionSecret
          KY_QNPROVISION_TABLENAME: !Ref UsersQn
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - AmazonDynamoDBReadOnlyAccess
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !Ref QnProvisionSecret

  # ### QN healthcheck

  QnHealthCheckFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      MemorySize: 128
      CodeUri: ../../quicknode/healthcheck/lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            # Make sure this endpoint does not require auth
            Auth:
              Authorizer: NONE
            Path: /healthcheck
            Method: get
            RestApiId:
              Ref: QnApi
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Environment:
        Variables:
          KY_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          KY_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          KY_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          KY_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          KY_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  # ### QN Provision
  QnProvisionSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: QN Provision username and password
      SecretString: '{"username":"Placeholder","password":"placeholder"}'

  QnProvisionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      MemorySize: 128
      CodeUri: ../../quicknode/provision/lambda
      Events:
        Provision:
          Type: Api
          Properties:
            Path: /provision
            Method: post
            RestApiId:
              Ref: QnApi
            Auth:
              # Do not require QuickNode's headers
              Authorizer: NONE
        Update:
          Type: Api
          Properties:
            Path: /update
            Method: put
            RestApiId:
              Ref: QnApi
            Auth:
              # Do not require QuickNode's headers
              Authorizer: NONE
        Deactivate:
          Type: Api
          Properties:
            Path: /deactivate_endpoint
            Method: delete
            RestApiId:
              Ref: QnApi
            Auth:
              # Do not require QuickNode's headers
              Authorizer: NONE
        Deprovision:
          Type: Api
          Properties:
            Path: /deprovision
            Method: delete
            RestApiId:
              Ref: QnApi
            Auth:
              # Do not require QuickNode's headers
              Authorizer: NONE
      Environment:
        Variables:
          KY_QNPROVISION_AWSSECRET: !Ref QnProvisionSecret
          KY_QNPROVISION_TABLENAME: !Ref UsersQn
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - AmazonDynamoDBFullAccess
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !Ref QnProvisionSecret
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - apigateway:GET
              Resource: "*"

  # ### RPC route
  RpcFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      MemorySize: 128
      CodeUri: ../../query/lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /rpc
            Method: post
            RequestModel:
              Model: RpcRequest
              Required: true
              ValidateBody: true
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: QnApi
      Environment:
        Variables:
          KY_QUERY_MAXLIMIT: 1000
          KY_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          KY_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          KY_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          KY_DATABASE_DEFAULT_PASSWORD: "" # Used only in integration tests
          KY_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          KY_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  ###
  # Stats JSON API (feeds Grafana)
  ###

  StatsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref QnApiStageName
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Quota:
            Period: MONTH
            Limit: 44640 # every minute in a month

  StatsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      MemorySize: 128
      CodeUri: ../../stats/lambda
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /stats
            Method: get
            RestApiId:
              Ref: StatsApi
      Environment:
        Variables:
          KY_QNPROVISION_TABLENAME: !Ref UsersQn
          KY_DATABASE_DEFAULT_HOST: !GetAtt IndexDatabase.Endpoint.Address
          KY_DATABASE_DEFAULT_PORT: !GetAtt IndexDatabase.Endpoint.Port
          KY_DATABASE_DEFAULT_USER: !Ref RDSMasterUserName
          KY_DATABASE_DEFAULT_PASSWORD: "" # Used only in integration tests
          KY_DATABASE_DEFAULT_AWSSECRET: !GetAtt IndexDatabase.MasterUserSecret.SecretArn
          KY_DATABASE_DEFAULT_DATABASE: !Ref RDSDBName
      VpcConfig: # For accessing RDS instance
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref privateLambdaSubnet1
          - !Ref privateLambdaSubnet2
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - AmazonDynamoDBReadOnlyAccess
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource: !GetAtt IndexDatabase.MasterUserSecret.SecretArn

  ###
  # Plans
  ###

  ### QN plans

  UsagePlanQnStandard:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      # - QnApi
      - QnApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref QnApi
          Stage: !Ref QnApiStageName
      Description: Test plan for QN beta testing
      # Quota:
      #   Limit: 500
      #   Period: MONTH
      Throttle:
            # BurstLimit: 10
            RateLimit: 20
      UsagePlanName: qn-standard
  ApiKeyQnStandard:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - UsagePlanQnStandard
    Properties:
      # Note: due to SAM limitations, name of the plan HAS to be the same
      # as plan slug defined in QN
      Name: !Ref QnStandardPlanSlug
      Enabled: true
  LinkUsagePlanApiKeyQnStandard:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKeyQnStandard
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanQnStandard

  ###
  # S3 object storage
  ###

  # Not used:
  # IndexBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: trueblocks-qn-index

  ###
  # Network
  ###

  # create VPC
  RDSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.32.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  RDSVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RDSVPC

  # create subnets
  privateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.0.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]

  PrivateDbRouteTableSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSVPCRouteTable
      SubnetId: !Ref privateDBSubnet1

  privateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.16.0/20
      AvailabilityZone: !Select [ 1, !GetAZs ]

  PrivateDbRouteTableSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSVPCRouteTable
      SubnetId: !Ref privateDBSubnet2

  privateLambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.32.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]

  PrivateLambdaRouteTableSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSVPCRouteTable
      SubnetId: !Ref privateLambdaSubnet1

  privateLambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.48.0/20
      AvailabilityZone: !Select [ 1, !GetAZs ]

  PrivateLambdaRouteTableSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSVPCRouteTable
      SubnetId: !Ref privateLambdaSubnet2

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "description"
      SubnetIds:
        - !Ref privateDBSubnet1
        - !Ref privateDBSubnet2

  # Security groups
  # https://repost.aws/knowledge-center/connect-lambda-to-an-rds-instance

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - LambdaSecurityGroup
    Properties:
      GroupDescription: Allow Postgres access from lambda subnets
      VpcId: !Ref RDSVPC
      # Make sure the database is only accessible from the stack, database port only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId : !Ref LambdaSecurityGroup
      # Make it accessible from DevOps instances, too
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId : !Ref DevOpsInstanceSecurityGroup

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - RDSVPC
    Properties:
      GroupDescription: Security group for Lambda ENIs
      VpcId: !Ref RDSVPC
      # Allow Lambda <-> Secrets Manager:
      SecurityGroupIngress:
        - IpProtocol: -1
          ToPort: 65535
          FromPort: 0
          CidrIp: !GetAtt privateLambdaSubnet1.CidrBlock
        - IpProtocol: -1
          ToPort: 65535
          FromPort: 0
          CidrIp: !GetAtt privateLambdaSubnet2.CidrBlock

  ### VPC Endpoints
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - LambdaSecurityGroup
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      PrivateDnsEnabled: true
      VpcId: !Ref RDSVPC
      SubnetIds:
        - !Ref privateLambdaSubnet1
        - !Ref privateLambdaSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup

  # Used only by stats API (but will be useful for any lambda that
  # uses both Dynamo and RDS)
  DynamoDbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - LambdaSecurityGroup
    Properties:
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      # PrivateDnsEnabled: true
      VpcId: !Ref RDSVPC
      RouteTableIds:
        - !Ref RDSVPCRouteTable
      # SubnetIds:
      #   - !Ref privateLambdaSubnet1
      #   - !Ref privateLambdaSubnet2
      # SecurityGroupIds:
      #   - !Ref LambdaSecurityGroup
      # PolicyDocument:
      #     Version: '2012-10-17' # Policy Document
      #     Statement:
      #       - Effect: Allow
      #         Action:
      #           - dynamodb:GetItem
      #           - dynamodb:BatchGetItem
      #           - dynamodb:Scan
      #           - dynamodb:Query
      #           - dynamodb:ConditionCheckItem
      #         Resource: !Sub
      #           - 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}'
      #           - TableName: !Ref UsersQn

  # S3Endpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   DependsOn:
  #     - RDSSecurityGroup
  #   Properties:
  #     VpcEndpointType: Gateway
  #     ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
  #     VpcId: !Ref RDSVPC
  #     RouteTableIds:
  #       - !Ref RDSVPCRouteTable
  #     PolicyDocument:
  #         Version: '2012-10-17' # Policy Document
  #         Statement:
  #           - Effect: Allow
  #             Principal: '*'
  #             Action:
  #               - '*'
  #             Resource: '*'

  ###
  # DevOps
  ###

  # DevOps buckets
  DevOpsDbUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: key-devops-db-upload

  # DevOps EC2 instance and resources it needs

  # You can download this pair's private key from AWS Parameter Store
  DevOpsInstanceKeyPair:
      Type: AWS::EC2::KeyPair
      Properties:
        KeyName: devops-instance-keypair

  # Public internet connection configuration. It should only allow SSH and PostgreSQL connections
  PublicDevOpsSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RDSVPC
      CidrBlock: 172.32.64.0/20
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RDSVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    DependsOn:
      - InternetGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RDSVPC
  RoutePublicSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicDevOpsSubnet
  RouteIG:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  DevOpsInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DevOps SSH PSQL
      GroupDescription: Allows SSH and PostgreSQL connections to DevOps instance
      VpcId: !Ref RDSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        # Added for S3 -> EFS DataSync
        - IpProtocol: "tcp"
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      # Added for S3 -> EFS DataSync
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          ToPort: 65535
          FromPort: 0
          CidrIp: 0.0.0.0/0


  # DevOps EC2 instance. Remember that SAM and CF are always turning on the instances
  # their create, so if you comment the instance out, deploy (removing it) and uncomment
  # and redeploy (creating it) it will be on and you most likely want to stop it
  DevOpsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: "ami-0c7217cdde317cfec"
      KeyName: !Ref DevOpsInstanceKeyPair
      SecurityGroupIds:
        - !GetAtt DevOpsInstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicDevOpsSubnet

  DevOpsFs:
    Type: AWS::EFS::FileSystem
    Properties:
      AvailabilityZoneName: us-east-1a
      BackupPolicy:
        Status: DISABLED
      Encrypted: false
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - elasticfilesystem:*
              - datasync:*
            Principal:
                AWS: '*'

  DevOpsFsTarget:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref DevOpsFs
        SubnetId: !Ref PublicDevOpsSubnet
        SecurityGroups:
          - !Ref DevOpsFsSecurityGroup

  DevOpsFsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FileSystem Security Group
      VpcId: !Ref RDSVPC
      GroupName: devops-fs
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref DevOpsInstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          ToPort: 65535
          FromPort: 0
          DestinationSecurityGroupId: !Ref DevOpsInstanceSecurityGroup

  DevOpsFsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref DevOpsFs
      PosixUser:
        Uid: "13234"
        Gid: "1322"
        SecondaryGids:
          - "1344"
          - "1452"
      RootDirectory:
        CreationInfo:
          OwnerGid: "708798"
          OwnerUid: "7987987"
          Permissions: "0755"
        Path: "/efs"